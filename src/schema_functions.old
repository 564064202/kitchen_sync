
template <typename DatabaseClient>
string alter_columns_sql(DatabaseClient &client, const Table &table, const Columns &columns_to_drop, const Columns &columns_to_add) {
	string result("ALTER TABLE ");
	result += table.name;
	for (Columns::const_iterator column = columns_to_drop.begin(); column != columns_to_drop.end(); ++column) {
		if (column != columns_to_drop.begin()) result += ",";
		result += " DROP COLUMN ";
		result += client.quote_identifiers_with();
		result += column->name;
		result += client.quote_identifiers_with();
	}
	for (Columns::const_iterator column = columns_to_add.begin(); column != columns_to_add.end(); ++column) {
		if (!columns_to_drop.empty() || column != columns_to_add.begin()) result += ",";
		result += " ADD COLUMN ";
		result += client.column_definition(*column);
	}
	return result;
}

template <typename T>
struct name_is {
	const string &name;
	name_is(const string &name): name(name) {}
	bool operator()(const T& obj) const {
		return (obj.name == name);
	}
};

struct key_column_matches {
	const Columns &columns1;
	const Columns &columns2;
	key_column_matches(const Columns &columns1, const Columns &columns2): columns1(columns1), columns2(columns2) {}
	bool operator()(size_t index1, size_t index2) const {
		return (columns1[index1] == columns2[index2]);
	}
};

	bool primary_key_matches(const Table &from_table, const Table &to_table) {
		size_t last_primary_key_column = *max_element(from_table.primary_key_columns.begin(), from_table.primary_key_columns.end());
		return (from_table.primary_key_columns.size() == to_table.primary_key_columns.size() &&
				mismatch(from_table.primary_key_columns.begin(),
						 from_table.primary_key_columns.end(),
						 to_table.primary_key_columns.begin(),
						 key_column_matches(from_table.columns, to_table.columns)).
					first == from_table.primary_key_columns.end() &&
				last_primary_key_column < to_table.columns.size() &&
				mismatch(from_table.columns.begin(),
						 from_table.columns.begin() + last_primary_key_column,
						 to_table.columns.begin()).
					first == from_table.columns.begin() + last_primary_key_column);
	}

	void match_table(Table &from_table, Table &to_table) {
		match_columns(from_table, to_table);
		to_table.primary_key_columns = from_table.primary_key_columns; // we checked the primary key columns themselves were the same above, but if other columns were added or removed, the column index values in primary_key_columns may have changed
		match_keys(from_table, from_table.keys, to_table.keys);
		// FUTURE: check collation etc.
	}


	void match_columns(const Table &from_table, Table &to_table) {
		Columns columns_to_drop;
		Columns columns_to_add;
		Columns::const_iterator from_column = from_table.columns.begin();
		Columns::iterator         to_column =   to_table.columns.begin();
		while (to_column != to_table.columns.end()) {
			if (from_column != from_table.columns.end() &&
				from_column->name == to_column->name) {
				check_column_match(from_table, *from_column, *to_column);
				++to_column;
				++from_column;

			} else {
				// our end has an extra column or misordered column, drop it; if necessary it will
				// be added back in the correct order below
				columns_to_drop.push_back(*to_column);
				update_keys_for_dropped_column(to_table, to_column - to_table.columns.begin());
				to_column = to_table.columns.erase(to_column);
				// keep the current from_column and re-evaluate on the next iteration
			}
		}
		while (from_column != from_table.columns.end()) {
			columns_to_add.push_back(*from_column);
			to_table.columns.push_back(*from_column);
			++from_column;
		}
		if (!columns_to_drop.empty() || !columns_to_add.empty()) {
			queue_alter_columns(to_table, columns_to_drop, columns_to_add);
		}
	}

	void update_keys_for_dropped_column(Table &table, size_t column_index) {
		for (Keys::iterator key = table.keys.begin(); key != table.keys.end(); key = update_key_for_dropped_column(table, key, column_index)) ;
	}

	Keys::iterator update_key_for_dropped_column(Table &table, Keys::iterator key, size_t column_index) {
		ColumnIndices::iterator column = key->columns.begin();
		while (column != key->columns.end()) {
			if (*column == column_index) {
				if (client.keys_are_dropped_when_columns_are_dropped()) {
					return table.keys.erase(key);
				} else {
					column = key->columns.erase(column);
				}
			} else if (*column > column_index) {
				--*column;
			}
		}
		return ++key;
	}
